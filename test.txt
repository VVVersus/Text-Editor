123So this layout can contain only 5 components, but is this enough to create more complex programs? Yes, and actually this layout is used widely when developing programs on Swing. The component JPanel can contain other components. The default layout for this is FlowLayout; it puts components on the screen from left to right and from top to bottom. You just add a JPanel component to the frame with BorderLayout and then add several components to this JPanel with FlowLayout!  You can find out more about BorderLayout here and here. You can look here to see how to use FlowLayout.

Did you notice that if you typed more text than the size of the component (in our case, in JTextArea), then the text is just not visible? This is the problem that can happen with any component. To solve this problem, this component should be wrapped by another component - JScrollPane. This class takes the initial component as a parameter and should be added to the JFrame instead of it. Also, all manipulations with size and location should proceed with this wrapper. As a result, the component can be scrolled horizontally as well as vertically. Here and here you can see how to use JScrollPane.

Now, let's add working with files. To load a file from a hard drive, the user should specify the name of the existing file. If you run this from an IDE, this file should be in the same folder where the "src" folder is. Then, after the user presses the "Load" button, the content of the file should be displayed in the text field. After editing, you should be able to save the file. To do it, you need to specify a name for the file and then press the button "Save".

To create a one-line input field for the name of the file you need a component JTextField. To get the input text from that field, you need getText method.

To create buttons, you need JButton. Now, you need to interact with buttons. You need to execute some of your code when you click on a button. To perform this action, you need ActionListener. Since ActionListener is an interface, you need to implement the method actionPerformed in a class that implements this interface. This would be your code when the user presses the button. Note, that for different buttons you need different logic, so you need different classes that implement an interface ActionListener. After that, you need to bind each class with each button. The method button.addActionListener(ActionListener listener) makes this possible. This method takes an object of a class that implements ActionListener. After that, all should be fine. Pressing the button triggers the actionPerformed method of that object.

If you are familiar with lambdas, you can use them instead of creating classes that be used only once. You can implement them as shown in the following template:  